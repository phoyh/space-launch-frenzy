function Spieler_IndexFuerKey(a)
	result = -1
	for spi = 0 to Spieler_Anzahl - 1
		if Spieler_GebotKey[spi] = a then
			result = spi
		endif
	next spi
	return result
end function

function Spieler_ZuverlaessigkeitFuerNachfrageart(spi, nai)
	return Berechnen_Zuverlaessigkeit(Spieler_Zuverlaessigkeit[spi], Nachfrageart_ZuverlaessigkeitLevel[nai])
end function

function Spieler_WiederverwendbarkeitFuerNachfrageart(spi, nai)
	return Berechnen_Wiederverwendbarkeit(Spieler_Wiederverwendbarkeit[spi], Nachfrageart_WiederverwendbarkeitLevel[nai])
end function

subroutine Spieler_Auftragsergebnis(ni, istNutzlastErfolg, wurdeLandungVersucht, istLandungErfolg)
	ri = Nachfrage_RaketeIndex[ni]
	spi = Rakete_SpielerIndex[ri]
	nai = Nachfrage_ArtIndex[ni]
	Statistik_RaketenstartAnzahl[spi]++
	if istNutzlastErfolg then
		Spieler_Geld[spi] += Nachfrage_SiegGebot[ni]
		Statistik_RaketenstartErfolg[spi]++
		call Nachfrageart_FreischaltungBeiErfolg(nai)
	else
		kosten = Nachfrageart_Strafe[nai]
		Spieler_Geld[spi] -= kosten
		Statistik_AusgabenStrafe[spi] += kosten
	endif
	if wurdeLandungVersucht then
		Statistik_LandungAnzahl[spi]++
	endif
	if istLandungErfolg then
		Rakete_BenoetigtInstandsetzung[ri] = true
		Statistik_LandungErfolg[spi]++
	else
		call Rakete_Loeschen(ri)
	endif
end subroutine

subroutine Spieler_Raketen(spi, ref(eigeneRi))
	redim eigeneRi(Spieler_RaketenAnzahl(spi))
	eri = 0
	for ri = 0 to Rakete_Anzahl - 1
		if Rakete_SpielerIndex[ri] = spi and Rakete_IstGueltig[ri] then
			eigeneRi[eri++] = ri
		endif
	next ri
end subroutine

function Spieler_RaketenAnzahl(spi)
	if Rakete_Anzahl = 0 then
		return 0
	endif
	anzahl = 0
	for ri = 0 to Rakete_Anzahl - 1
		if Rakete_SpielerIndex[ri] = spi and Rakete_IstGueltig[ri] then
			anzahl++
		endif
	next ri
	return anzahl
end function

function Spieler_KostenRaketenbau(spi, rai)
	stufe = Spieler_Effizienz[spi]
	schwierigkeitslevel = Raketenart_EffizienzLevel[rai]
	kosten = Raketenart_Anfangskosten[rai]
	return Berechnen_Kosten(stufe, schwierigkeitslevel, kosten) 
end function

function Spieler_TextNeueRakete$(spi, rai)
	return Rakete_TextOhneSpielerFuerKonfiguration$(rai, false, Spieler_Zuverlaessigkeit[spi], Spieler_Wiederverwendbarkeit[spi], Spieler_Effizienz[spi])
end function

subroutine Spieler_Raketenbau(spi, rai)
	kosten = Spieler_KostenRaketenbau(spi, rai)
	Spieler_Geld[spi] -= kosten
	Statistik_AusgabenRaketenbau[spi] += kosten
	Statistik_SchubkraftGebaut[spi] += Raketenart_Schubkraft[rai]
	call Rakete_Hinzufuegen(rai, spi)
end subroutine

function Spieler_IndexBesteRaketeFuerNachfragenart(spi, nai)
	if Spieler_RaketenAnzahl(spi) = 0 then
		return -1
	endif
	eigeneRi = 0
	call Spieler_Raketen(spi, ref(eigeneRi))
	besterRi = -1
	besterGesamtStufe = -1
	besterSchubkraft = 1000000000
	for eri = 0 to eigeneRi[?] - 1
		ri = eigeneRi[eri]
		schubkraft = Raketenart_Schubkraft[Rakete_ArtIndex[ri]]
		if schubkraft >= Nachfrageart_BenoetigteSchubkraft[nai] and not Rakete_BenoetigtInstandsetzung[ri] and not Rakete_IstReserviert(ri) then
			if schubkraft <= besterSchubkraft then
				gesamtStufe = Rakete_GesamtStufe(ri)
				if schubkraft < besterSchubkraft or gesamtStufe > besterGesamtStufe then
					besterRi = ri
					besterGesamtStufe = gesamtStufe
					besterSchubkraft = schubkraft
				endif
			endif
		endif
	next eri
	return besterRi
end function

subroutine Spieler_FundingEntgegennehmen(spi, geld)
	Spieler_Geld[spi] += geld
	Statistik_EinnahmenFunding[spi] += geld
end subroutine

subroutine Spieler_ForschungBezahlen(spi, kosten)
	Spieler_Geld[spi] -= kosten
	Statistik_AusgabenForschung[spi] += kosten
end subroutine

subroutine Spieler_AuktionTeilnehmen(spi)
	Statistik_AuktionTeilnahmeAnzahl[spi]++
end subroutine

subroutine Spieler_GebotAbgeben(spi)
	Statistik_AuktionGeboteAnzahl[spi]++
end subroutine